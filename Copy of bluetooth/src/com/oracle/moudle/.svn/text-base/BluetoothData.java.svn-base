package com.oracle.moudle;

import java.io.IOException;

import java.io.InputStream;
import java.io.OutputStream;
import android.bluetooth.BluetoothSocket;

/**
 * 实现数据的存储的类,界面在更新时所取到的数据就来源于此
 * 
 * @author Administrator
 * 
 */
public class BluetoothData {
	public static int temperature;
	public static BluetoothSocket bluSocket;

	/**
	 * 调用一次发送一次数据
	 * 
	 * @param addY
	 */
	public void sendData(int addY) {
		new send_HC06(addY).start();
	}

	public void updateData() {
		new Listen_HC06().start();
	}

	/**
	 * 负责发送信息给蓝牙.
	 * 
	 * @author henry
	 * 
	 */
	private class send_HC06 extends Thread {
		private int message;

		/**
		 * 无参构造
		 * 
		 * @param addY
		 */
		public send_HC06(int addY) {
			this.message = addY;
		}

		@Override
		public void run() {
			super.run();
			try {
				System.out.println("线程已经启动!");
				OutputStream os = bluSocket.getOutputStream();
				InputStream is = bluSocket.getInputStream();
				os.write(message);
				// os.close();
				// System.out.println("数据发送完毕!");
				// byte[] arr = new byte[128];
				// is.read(arr);
				// String target = new String(arr);
				// System.out.println("返回数据为" + target);
				// int result = getInt(arr);
				// System.out.println(result);
				// is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	/**
	 * 监听来自蓝牙模块的消息的线程,我们必须还要注意的是我们的数据都要有序的存储起来,而数据存储的格式就显得尤为重要了,更新的数据都放在这里.
	 * 读取数据的线程一直工作在后台,直到主界面退出才可以退出 还有就是传输的过程中以字节流传输,毕竟单片机不比我们的程序啦!
	 * 
	 * @author henry
	 */
	private class Listen_HC06 extends Thread {

		@Override
		public void run() {
			super.run();
			// while (true) {
			//
			// }
			String s = new String();
			synchronized (s) {
				// 获得字符输入流
				InputStream is;
				try {
					while (true) {
						is = bluSocket.getInputStream();
						System.out.println("连接成功!");
						byte[] arr = new byte[128];
						is.read(arr);
						temperature = getInt(arr);
						// 将得到的温度值进行保存
						is.close();
					}
				} catch (IOException e1) {
					e1.printStackTrace();
					System.out.println("蓝牙连接已经断开!");
				}
			}
		}
	}

	/**
	 * 将字节数组转化为整形
	 * 
	 * @param bytes
	 * @return
	 */
	public int getInt(byte[] bytes) {
		return (0xff & bytes[0]) | (0xff00 & (bytes[1] << 8))
				| (0xff0000 & (bytes[2] << 16))
				| (0xff000000 & (bytes[3] << 24));
	}
}
